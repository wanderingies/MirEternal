#pragma warning disable CS0649
#pragma warning disable CS8618

using TouchSocket.Core;
using LoginServer.Service;
using System.Text;
using LoginServer.Data;
using LoginServer.Data.Enum;
using LoginServer.Data.Types;
using GameServer.Data.Types;
using System.Reflection.Emit;

namespace LoginServer.Packs.Protocol
{
    /// <summary>
    /// 创建角色
    /// </summary>
    internal class x03EA : Package
    {
        #region public field

        public string name;
        
        public byte gender;
        public byte race;
        public byte hairstyle;
        public byte haircolor;
        public byte facestyle;

        public string sessionid;
        public short ResultType;
        public byte[] ResultMessage;
        #endregion

        #region public attribute

        public ushort Type => 0x03EA;
        public ushort Size => 40;        
        #endregion

        public x03EA()
        {
            #region 425

            /*0xEA, 0x03, 0x0E, 0x03,*/
            ResultMessage = new byte[803] {
                  0x33, 0x35, 0x37, 0x32, 0x33, 0x38, 0x36, 0x34, 0x37, 0x34, 0x00, 0x37
                , 0x34, 0x00, 0x3a, 0x39, 0x64, 0x3a, 0x39, 0x32, 0x3a, 0x33, 0x33, 0x3a, 0x38, 0x33, 0x3a, 0x63
                , 0x62, 0x00, 0x55, 0x4c, 0x53, 0x32, 0x31, 0x2d, 0x64, 0x36, 0x34, 0x32, 0x30, 0x61, 0x34, 0x64
                , 0x61, 0x31, 0x32, 0x37, 0x34, 0x35, 0x66, 0x64, 0x62, 0x32, 0x35, 0x33, 0x66, 0x66, 0x33, 0x32
                , 0x36, 0x35, 0x32, 0x63, 0x35, 0x01, 0x81, 0x6e, 0x7e, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x32
                , 0x30, 0x31, 0x36, 0x2d, 0x30, 0x32, 0x2d, 0x32, 0x36, 0x00, 0x78, 0x9c, 0xed, 0x56, 0xbd, 0x6e
                , 0xd4, 0x40, 0x10, 0x9e, 0x5b, 0xfb, 0xec, 0xc3, 0xbe, 0xb3, 0x8f, 0x23, 0x10, 0x41, 0x10, 0x44
                , 0x49, 0x74, 0x41, 0x04, 0x22, 0x10, 0x28, 0x48, 0x50, 0x20, 0x50, 0x44, 0x41, 0xc7, 0x51, 0x83
                , 0x28, 0x78, 0x12, 0x24, 0x10, 0x15, 0x0f, 0x41, 0x93, 0xb7, 0x80, 0x82, 0x92, 0xb7, 0xa0, 0xa1
                , 0xa1, 0xe3, 0x01, 0xc2, 0xcc, 0xf9, 0x1b, 0xfc, 0x79, 0xc9, 0x05, 0x21, 0x45, 0x4a, 0xc1, 0x8d
                , 0x34, 0xda, 0xdd, 0xd9, 0xf9, 0xfb, 0x66, 0x77, 0xc7, 0x16, 0x11, 0x19, 0xc8, 0xf1, 0x54, 0x29
                , 0x1f, 0x1e, 0x41, 0xa5, 0xca, 0x37, 0x8e, 0xd8, 0xcb, 0x12, 0x91, 0x59, 0x4f, 0x24, 0xc3, 0x9e
                , 0xf9, 0xcf, 0x16, 0xf8, 0xe8, 0x2f, 0xd8, 0x33, 0xd9, 0x59, 0xe5, 0xa0, 0xbc, 0xaa, 0x5c, 0x20
                , 0xcf, 0x1a, 0xfa, 0x43, 0xf0, 0x08, 0x7a, 0xb6, 0x3f, 0xc6, 0x7a, 0x04, 0xdd, 0x1c, 0x7c, 0x0f
                , 0x18, 0x4c, 0x7f, 0x05, 0xb1, 0x72, 0x8c, 0x6f, 0x61, 0x77, 0x5f, 0xf9, 0x05, 0x64, 0x66, 0x6f
                , 0xd8, 0xb6, 0xc8, 0x87, 0xf1, 0x2e, 0x62, 0xe7, 0xf0, 0x97, 0x21, 0xee, 0x88, 0x74, 0x76, 0x10
                , 0xdb, 0xe4, 0x2f, 0x95, 0xb5, 0x14, 0x72, 0x46, 0x39, 0x85, 0x7e, 0x1f, 0x7b, 0x17, 0x09, 0xf3
                , 0x65, 0xf8, 0xe8, 0xc3, 0x47, 0x06, 0xbb, 0x8a, 0x70, 0x73, 0x8d, 0x0a, 0xd2, 0xcb, 0xa2, 0xf9
                , 0x79, 0xd8, 0xd8, 0x78, 0x01, 0x36, 0x05, 0xc6, 0x2b, 0x3a, 0x4e, 0x10, 0xc7, 0xed, 0xbc, 0xd6
                , 0x69, 0x74, 0x06, 0x81, 0x6c, 0x53, 0xe4, 0x67, 0xf5, 0xdb, 0x27, 0x5d, 0xae, 0xb1, 0xf9, 0xf8
                , 0x92, 0xb4, 0x71, 0xdc, 0xcf, 0x39, 0xcc, 0x87, 0xa8, 0x69, 0x8e, 0xd1, 0xf0, 0x6d, 0x53, 0x0e
                , 0x25, 0xe4, 0x5e, 0xd3, 0x8c, 0xe2, 0x4f, 0x68, 0xce, 0xfb, 0x5e, 0xcf, 0x94, 0xfc, 0x0c, 0xe0
                , 0xbb, 0x20, 0xd9, 0x1c, 0x4f, 0x68, 0x30, 0x24, 0x60, 0xcf, 0xdb, 0x75, 0xd7, 0xa3, 0xfa, 0xda
                , 0x58, 0x23, 0xb6, 0x9f, 0x83, 0xc9, 0x6e, 0xd3, 0xd9, 0x7b, 0x9d, 0x6c, 0x6f, 0x8f, 0x6c, 0x72
                , 0xe4, 0x54, 0x52, 0xde, 0x6e, 0xef, 0xf9, 0x3b, 0xfb, 0xbd, 0x60, 0x4c, 0xab, 0x34, 0x9f, 0x50
                , 0x8e, 0x15, 0xe9, 0x55, 0xb4, 0xef, 0x38, 0x73, 0xec, 0x07, 0xb0, 0xc9, 0xdc, 0x7e, 0x4a, 0xf7
                , 0xca, 0x39, 0x23, 0x5d, 0x5b, 0x5f, 0xa5, 0xb3, 0x2c, 0x20, 0x1b, 0x63, 0x34, 0x9d, 0x01, 0x61
                , 0x0e, 0x91, 0x6d, 0x00, 0x96, 0x14, 0xeb, 0x9a, 0xd6, 0x29, 0xe5, 0xe9, 0x58, 0xe6, 0x7e, 0xfa
                , 0xcd, 0xf9, 0x25, 0x51, 0xed, 0x1d, 0x67, 0x5c, 0x33, 0x1f, 0x1d, 0xbb, 0xe3, 0x9f, 0x60, 0x3e
                , 0xb8, 0xd6, 0xda, 0xf9, 0xbe, 0xd9, 0x6f, 0x92, 0x1f, 0xae, 0x41, 0x4d, 0x77, 0xc1, 0xe3, 0xbf
                , 0xd6, 0xf9, 0x9a, 0xf2, 0x5d, 0xe9, 0xbe, 0x0f, 0xbe, 0x8f, 0x8e, 0xc1, 0xcf, 0x97, 0xf3, 0xaf
                , 0xa8, 0xf6, 0x1e, 0x8b, 0xcf, 0xeb, 0x91, 0xf2, 0x0d, 0xc2, 0xe8, 0xba, 0xb6, 0x3e, 0x08, 0x4d
                , 0x4e, 0x43, 0xc2, 0x30, 0x03, 0xbe, 0xeb, 0x74, 0x17, 0xfc, 0xbd, 0xf2, 0xf9, 0xc5, 0xf7, 0xca
                , 0x64, 0x1b, 0xd2, 0xcd, 0xff, 0x03, 0xce, 0x93, 0xdf, 0x27, 0xf7, 0x8f, 0x25, 0xfd, 0x9f, 0xf4
                , 0x58, 0xba, 0x3d, 0xce, 0xee, 0xc2, 0x4d, 0xac, 0xf5, 0x49, 0xcd, 0xdf, 0xc2, 0x1d, 0x69, 0xee
                , 0xc9, 0xa7, 0xb4, 0xd1, 0xdd, 0x91, 0x6e, 0x4f, 0xde, 0xc6, 0x7a, 0x86, 0xb9, 0xc9, 0xa6, 0x60
                , 0xbe, 0x83, 0x05, 0xd9, 0xf9, 0xdb, 0xe1, 0xf7, 0xe7, 0x7d, 0x2c, 0xfb, 0x0b, 0x0f, 0x17, 0xc8
                , 0xc3, 0x31, 0xf2, 0x3c, 0x5a, 0x5b, 0xac, 0x8f, 0xa1, 0x7d, 0x9b, 0x55, 0x64, 0x73, 0x4b, 0x9a
                , 0x5e, 0xe0, 0x39, 0x7d, 0x27, 0x2c, 0x8c, 0x69, 0x0f, 0xe3, 0x43, 0xe5, 0x4d, 0xf2, 0xcd, 0xdf
                , 0x46, 0xef, 0x19, 0xdc, 0x9f, 0xdc, 0xc7, 0x54, 0xda, 0xde, 0xd8, 0x8f, 0x6a, 0xe1, 0xef, 0xdc
                , 0xbe, 0x09, 0x5f, 0xc9, 0xce, 0x68, 0x4d, 0xda, 0x6f, 0x8d, 0xc9, 0xad, 0x77, 0x94, 0xc4, 0xde
                , 0xab, 0xb9, 0x37, 0xcd, 0xfb, 0x24, 0xd5, 0xfc, 0x77, 0x1f, 0xea, 0x35, 0xe3, 0xfb, 0xd0, 0xf6
                , 0xd5, 0x12, 0x35, 0xa9, 0x23, 0x1f, 0x87, 0x11, 0x71, 0x6f, 0x74, 0xd9, 0x67, 0xc2, 0xf9, 0x4d
                , 0x9a, 0x5e, 0xe4, 0x6b, 0xef, 0x6f, 0xef, 0x22, 0x3b, 0x1b, 0xf7, 0x23, 0xff, 0x76, 0x3e, 0xfe
                , 0xfd, 0x7a, 0xa2, 0x39, 0xee, 0xea, 0xfa, 0xc1, 0xba, 0xce, 0xf5, 0x52, 0x3e, 0x55, 0xd9, 0xcf
                , 0x5e, 0xb7, 0x26, 0xe3, 0xa8, 0x46, 0x5c, 0x67, 0x97, 0xad, 0xa8, 0xc3, 0x1f, 0xc0, 0xf9, 0x5c
                , 0xf9, 0x12, 0xf6, 0x64, 0x49, 0x4b, 0x5a, 0xd2, 0x89, 0xd3, 0x69, 0xfd, 0x5b, 0x58, 0x4f, 0x7b
                , 0x73, 0x4a, 0xb1, 0x4f, 0x92, 0xbc, 0xe7, 0x5a, 0x1d, 0x9f, 0x69, 0xef, 0x7a, 0x25, 0x7f, 0x7e
                , 0xdb, 0x4c, 0xc7, 0x7a, 0x64, 0xf2, 0x0f, 0x7e, 0x7f, 0x01, 0x14, 0xc5, 0x02, 0xa6, 0xf4, 0x03
                , 0x00, 0xb4, 0x02, 0x64, 0x00, 0x03, 0x81, 0x21, 0x81, 0x3f, 0x81, 0x5d, 0x81, 0x7b, 0x81, 0x7b
                , 0x81, 0xb5, 0x02, 0x00, 0x00, 0x81, 0x81 };
            #endregion

            #region 424

            /*0xEA, 0x03, 0x11, 0x03*/
            ResultMessage = new byte[781]
            {
                0x33, 0x34, 0x37, 0x39, 0x38, 0x31, 0x30, 0x33, 0x30, 0x32, 0x00, 0x30, 0x32,
                0x00, 0x7E, 0x7E, 0x81, 0x81, 0x91, 0xA6, 0xE0, 0x64, 0x66, 0x3A, 0x37, 0x35, 0x3A, 0x31, 0x61, 0x00,
                0x55, 0x4C, 0x53, 0x32, 0x31, 0x2D, 0x63, 0x31, 0x30, 0x37, 0x64, 0x32, 0x34, 0x33, 0x37, 0x36, 0x30,
                0x30, 0x34, 0x61, 0x62, 0x64, 0x39, 0x62, 0x30, 0x34, 0x35, 0x62, 0x35, 0x62, 0x35, 0x39, 0x33, 0x34,
                0x65, 0x01, 0x81, 0x6E, 0x5E, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x32, 0x30, 0x32, 0x33, 0x2D, 0x30,
                0x38, 0x2D, 0x32, 0x32, 0x00, 0x78, 0x9C, 0xED, 0x56, 0xBD, 0x6E, 0x13, 0x41, 0x10, 0x5E, 0x9F, 0xEF,
                0xC7, 0xDC, 0xD9, 0x77, 0xC6, 0x04, 0x22, 0x08, 0x82, 0x28, 0x41, 0x0E, 0x22, 0x10, 0x81, 0x40, 0x41,
                0x82, 0x02, 0x81, 0x22, 0x0A, 0x3A, 0x4C, 0x0D, 0xA2, 0xE0, 0x49, 0x90, 0x40, 0x54, 0x3C, 0x04, 0x0D,
                0x2D, 0x4F, 0x00, 0x05, 0x25, 0x6F, 0x41, 0x43, 0x43, 0xC7, 0x03, 0x84, 0x19, 0xDF, 0xF7, 0x71, 0x9F,
                0x17, 0x12, 0x84, 0x14, 0x29, 0x05, 0x1E, 0x69, 0xB4, 0xBB, 0xB3, 0xF3, 0xF7, 0xCD, 0xEE, 0xCE, 0x5D,
                0x08, 0x21, 0x0C, 0xC2, 0xE1, 0x54, 0x1B, 0xEF, 0x83, 0x3E, 0xC8, 0xBC, 0xB2, 0xF9, 0x86, 0xAC, 0x49,
                0x79, 0x3F, 0x84, 0x59, 0x2F, 0x84, 0x1C, 0x7B, 0xEE, 0x3F, 0xFF, 0x83, 0x9E, 0x53, 0x76, 0xC0, 0x9E,
                0xCB, 0x4E, 0x1A, 0x27, 0xC6, 0xAB, 0xC6, 0x25, 0xF2, 0x6C, 0xA0, 0x3F, 0x04, 0x8F, 0xA0, 0xE7, 0xFB,
                0x63, 0xAC, 0x47, 0xD0, 0x2D, 0xC0, 0xB7, 0x81, 0xC1, 0xF5, 0x57, 0x10, 0xAB, 0xC0, 0xF8, 0x0A, 0x76,
                0x77, 0x8C, 0x9F, 0x42, 0xE6, 0xF6, 0x8E, 0xED, 0x92, 0xF8, 0x70, 0xDE, 0x41, 0xEC, 0x02, 0xFE, 0x72,
                0xC4, 0x1D, 0x89, 0xCE, 0x36, 0x62, 0xBB, 0xFC, 0x99, 0xB1, 0x95, 0x22, 0x9C, 0x30, 0x4E, 0xA1, 0x9F,
                0x61, 0xEF, 0xAC, 0x60, 0x3E, 0x0F, 0x1F, 0x19, 0x7C, 0xE4, 0xB0, 0xAB, 0x05, 0xB7, 0xD6, 0xA8, 0x14,
                0xBD, 0x3C, 0x9A, 0x9F, 0x86, 0x8D, 0x8F, 0x67, 0x60, 0x53, 0x62, 0xBC, 0x60, 0xE3, 0x04, 0x71, 0x68,
                0xC7, 0x5A, 0xA7, 0xD1, 0x19, 0x24, 0x62, 0x9B, 0x22, 0x3F, 0xAF, 0xDF, 0x9E, 0xE8, 0x6A, 0x8D, 0xDD,
                0xC7, 0xE7, 0x7E, 0x17, 0x87, 0x7E, 0x4E, 0x61, 0x3E, 0x44, 0x4D, 0x0B, 0x8C, 0x8E, 0x6F, 0x4B, 0x72,
                0xA8, 0x20, 0x67, 0x4D, 0x73, 0x89, 0x3F, 0x91, 0xB9, 0xEE, 0xB3, 0x9E, 0xA9, 0xF8, 0x19, 0xC0, 0x77,
                0x29, 0xB2, 0x39, 0x9E, 0xA4, 0xC5, 0xD0, 0x07, 0x33, 0x6F, 0xEA, 0xAE, 0x47, 0xF5, 0xF5, 0xB1, 0x41,
                0x6C, 0x9E, 0x83, 0xCB, 0x6E, 0xC8, 0xD9, 0xB3, 0x4E, 0xBE, 0xB7, 0x2B, 0x36, 0x05, 0x72, 0xAA, 0x24,
                0x6F, 0xDA, 0x33, 0x7F, 0x32, 0xEF, 0x85, 0x62, 0x5A, 0x95, 0xF9, 0x44, 0x72, 0xAC, 0x45, 0xAF, 0x96,
                0x7D, 0xE2, 0x2C, 0xB0, 0x9F, 0x80, 0x5D, 0x46, 0xFB, 0xA9, 0xDC, 0x2B, 0x72, 0x2E, 0xBA, 0xBE, 0xBE,
                0x28, 0x67, 0x59, 0x42, 0x36, 0xC6, 0xE8, 0x3A, 0x03, 0xC1, 0x9C, 0x44, 0xB6, 0x09, 0xB0, 0xA4, 0x58,
                0x37, 0xB2, 0x4E, 0x25, 0x4F, 0x62, 0x99, 0xFB, 0xC9, 0xDA, 0xF3, 0xEB, 0x47, 0xB5, 0x27, 0xCE, 0xB8,
                0x66, 0x1C, 0x89, 0x9D, 0xF8, 0x27, 0x98, 0x0F, 0x2E, 0x77, 0x76, 0xDC, 0x77, 0xFB, 0x4D, 0xF1, 0xA3,
                0x35, 0x68, 0xE4, 0x2E, 0x30, 0xFE, 0x0B, 0x9B, 0xAF, 0x19, 0xDF, 0x0A, 0x8B, 0xEF, 0x43, 0xEF, 0x23,
                0x31, 0xF0, 0x7C, 0x35, 0xFF, 0x5A, 0x6A, 0xCF, 0x58, 0x7A, 0x5E, 0xF7, 0x8D, 0xAF, 0x0A, 0x46, 0xEA,
                0xFA, 0xFA, 0x7D, 0xD2, 0xE6, 0x34, 0x14, 0x0C, 0x33, 0xE0, 0xBB, 0x22, 0x77, 0x81, 0xEF, 0x55, 0xCF,
                0x2F, 0xBE, 0x57, 0x2E, 0xDB, 0x08, 0x8B, 0xF9, 0xBF, 0xC5, 0x79, 0xEA, 0xFB, 0xD4, 0xFE, 0xB1, 0xA4,
                0xFF, 0x93, 0x1E, 0x84, 0xC5, 0x1E, 0xE7, 0x77, 0xE1, 0x1A, 0xD6, 0xF6, 0xA4, 0xE6, 0x6F, 0xE1, 0x66,
                0x68, 0xEF, 0xC9, 0xC7, 0xB4, 0xD5, 0xDD, 0x0E, 0x8B, 0x3D, 0x79, 0x0B, 0xEB, 0x19, 0xE6, 0x2E, 0x9B,
                0x82, 0xF5, 0x0E, 0x96, 0x62, 0xC7, 0xB7, 0xA3, 0xEF, 0x8F, 0x7D, 0x2C, 0xFF, 0x0B, 0x0F, 0x0F, 0x90,
                0x27, 0x87, 0xC8, 0x8B, 0x68, 0xED, 0xB1, 0xDE, 0x25, 0xDD, 0xDB, 0xAC, 0x23, 0x9B, 0xEB, 0xA1, 0xED,
                0x05, 0xCC, 0xE9, 0x9B, 0x60, 0x51, 0x4C, 0xBB, 0x18, 0xEF, 0x19, 0x6F, 0x8A, 0x6F, 0xFD, 0x36, 0xB2,
                0x67, 0x68, 0x7F, 0xA2, 0x8F, 0x69, 0xE8, 0x7A, 0x63, 0x16, 0xD5, 0x82, 0xEF, 0xDC, 0xBF, 0x09, 0x5F,
                0xC4, 0xCE, 0x69, 0x2D, 0x74, 0xDF, 0x1A, 0x97, 0x7B, 0xEF, 0xA8, 0x84, 0xD9, 0xAB, 0xB5, 0x37, 0xCD,
                0xFB, 0xA4, 0xD4, 0xFC, 0x57, 0x1F, 0xEA, 0xB5, 0xE3, 0x9B, 0xA4, 0xEB, 0xAB, 0x15, 0x6A, 0xD2, 0x44,
                0x3E, 0xF6, 0x23, 0xD2, 0xDE, 0x48, 0xD9, 0x27, 0xC1, 0xF9, 0x35, 0xB4, 0xBD, 0x88, 0x6B, 0xF6, 0xB7,
                0xD7, 0x91, 0x9D, 0x8F, 0x7B, 0x91, 0x7F, 0x3F, 0x1F, 0x7E, 0xBF, 0x1E, 0x5A, 0x8E, 0x3B, 0xB6, 0xBE,
                0xBB, 0x6E, 0x73, 0xBB, 0x94, 0x8F, 0x4C, 0xF6, 0xA3, 0xB7, 0x58, 0x93, 0x71, 0x54, 0x23, 0xAD, 0x33,
                0x65, 0x2B, 0xE6, 0xF0, 0x3B, 0x70, 0x3E, 0x31, 0x3E, 0x87, 0xBD, 0xB0, 0xA4, 0x25, 0x2D, 0xE9, 0xC8,
                0xE9, 0xB8, 0xFE, 0x2D, 0xBC, 0xA7, 0xBD, 0x3C, 0xA6, 0xD8, 0x47, 0x49, 0xEC, 0xB9, 0x5E, 0xC7, 0xC7,
                0xD6, 0xBB, 0x9E, 0x87, 0xDF, 0xBF, 0x6D, 0xAE, 0xE3, 0x3D, 0xB2, 0xFF, 0x0F, 0x7E, 0x7F, 0x02, 0x03,
                0x23, 0xFF, 0x4B
            };
            #endregion
            return;
            #region 414

            /*0xEA, 0x03, 0xFD, 0x02*/
            ResultMessage = new byte[761] {
                0x33, 0x35, 0x32, 0x36, 0x33, 0x35, 0x31, 0x39, 0x38, 0x30, 0x00, 0x38, 0x30, 0x00, 0x3A, 0x32, 0x35,
                0x3A, 0x61, 0x61, 0x3A, 0x33, 0x66, 0x3A, 0x32, 0x32, 0x3A, 0x30, 0x36, 0x00, 0x55, 0x4C, 0x53, 0x32,
                0x31, 0x2D, 0x35, 0x35, 0x33, 0x32, 0x65, 0x30, 0x36, 0x39, 0x32, 0x64, 0x32, 0x33, 0x34, 0x62, 0x62,
                0x30, 0x39, 0x61, 0x38, 0x62, 0x63, 0x32, 0x64, 0x66, 0x64, 0x66, 0x39, 0x61, 0x33, 0x01, 0x81, 0x6E,
                0x06, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x32, 0x30, 0x31, 0x36, 0x2D, 0x30, 0x32, 0x2D, 0x32, 0x36,
                0x00, 0x78, 0x9C, 0xED, 0x56, 0xCD, 0x6A, 0x14, 0x41, 0x10, 0xEE, 0xED, 0xF9, 0x5B, 0xF7, 0x67, 0x66,
                0x5D, 0xA3, 0x41, 0x22, 0x1A, 0x8C, 0x6C, 0xC4, 0x68, 0x50, 0x94, 0x08, 0x7A, 0x10, 0x25, 0xE4, 0xE0,
                0xCD, 0x78, 0x56, 0x3C, 0x78, 0xF3, 0x2D, 0x04, 0xC5, 0xE7, 0xF0, 0xE2, 0xC5, 0x67, 0xD0, 0x83, 0x6F,
                0xE2, 0xC5, 0x8B, 0x37, 0x1F, 0x20, 0x56, 0xED, 0x7C, 0x9F, 0xF3, 0x6D, 0x93, 0x44, 0x44, 0x31, 0x97,
                0x2D, 0x28, 0xAA, 0xBB, 0xBA, 0xFE, 0xBB, 0xAB, 0x66, 0x42, 0x08, 0xA1, 0x1F, 0x8E, 0x87, 0xDA, 0xF0,
                0x00, 0xF0, 0x51, 0xD6, 0x43, 0x5B, 0x5F, 0x96, 0x3D, 0xA1, 0xCC, 0x42, 0xD8, 0xEF, 0x85, 0x50, 0xE2,
                0xCC, 0xED, 0x97, 0x87, 0xC8, 0x39, 0x14, 0x47, 0x9C, 0x39, 0xEF, 0xB4, 0x61, 0x34, 0x5C, 0x35, 0x1C,
                0x20, 0xCE, 0x06, 0xF2, 0x23, 0xE0, 0x18, 0x72, 0x7E, 0x3E, 0xC1, 0x7E, 0x0C, 0xD9, 0x0A, 0x78, 0x17,
                0x39, 0xB8, 0xFC, 0x0A, 0x7C, 0x55, 0xA0, 0x6F, 0xA0, 0x77, 0xCF, 0xF0, 0x19, 0x78, 0xAE, 0xEF, 0xB9,
                0x5D, 0x11, 0x1B, 0x8E, 0xDB, 0xF0, 0x5D, 0xC1, 0x5E, 0x09, 0xBF, 0x63, 0x91, 0xD9, 0x82, 0x6F, 0xE7,
                0x3F, 0x37, 0xB4, 0x52, 0x84, 0x53, 0x86, 0x39, 0xE4, 0x0B, 0x9C, 0x9D, 0x97, 0x9C, 0x2F, 0xC0, 0x46,
                0x01, 0x1B, 0x25, 0xF4, 0x6A, 0xC9, 0x5B, 0x6B, 0x34, 0x10, 0xB9, 0x32, 0x59, 0x9F, 0x85, 0x8E, 0xD3,
                0x73, 0xD0, 0x19, 0x80, 0x5E, 0x34, 0x3A, 0x85, 0x1F, 0xEA, 0xB1, 0xD6, 0x79, 0x72, 0x07, 0x51, 0x74,
                0x73, 0xC4, 0xE7, 0xF5, 0xDB, 0x15, 0x59, 0xAD, 0xB1, 0xDB, 0xF8, 0x92, 0x75, 0x7E, 0x68, 0xE7, 0x0C,
                0xD6, 0x23, 0xD4, 0xB4, 0x02, 0xF5, 0xFC, 0x36, 0x25, 0x86, 0x21, 0xF8, 0xA5, 0x20, 0xFD, 0xD7, 0xB2,
                0x66, 0xCD, 0x29, 0x53, 0x20, 0x9E, 0x4A, 0x62, 0xCA, 0x20, 0x53, 0x49, 0x1C, 0x31, 0xB6, 0x39, 0x64,
                0x40, 0xC6, 0x4D, 0xD9, 0xF5, 0xA4, 0xBE, 0x4E, 0x1B, 0xD4, 0x8B, 0xF7, 0xE0, 0xBC, 0x5B, 0x72, 0xF7,
                0xAC, 0x93, 0x9F, 0xED, 0x88, 0x4E, 0x85, 0x98, 0x86, 0x12, 0x37, 0xF5, 0x19, 0x3F, 0x91, 0xEF, 0x42,
                0x73, 0x5A, 0x95, 0xF5, 0x54, 0x62, 0xAC, 0x45, 0xAE, 0x96, 0x73, 0xE6, 0x59, 0xE1, 0x3C, 0x02, 0x9D,
                0x47, 0xFD, 0x99, 0xBC, 0x2B, 0x62, 0x29, 0xB2, 0xBE, 0xBF, 0x24, 0x77, 0x39, 0x00, 0x6F, 0x02, 0xEA,
                0x32, 0x7D, 0xC9, 0x39, 0x26, 0xBA, 0x11, 0xB9, 0xE4, 0xD8, 0x37, 0xB2, 0xCF, 0x25, 0x4E, 0xE6, 0x32,
                0xB7, 0x53, 0xB4, 0xF7, 0x97, 0x25, 0xB5, 0x67, 0x9E, 0x69, 0xCD, 0x48, 0x99, 0x3B, 0xF3, 0x9F, 0x62,
                0xDD, 0xBF, 0xDA, 0xE9, 0xE9, 0x1B, 0xDA, 0x10, 0x3B, 0x5A, 0x83, 0x46, 0xDE, 0x02, 0xFD, 0xBF, 0xB4,
                0xF5, 0x9A, 0xE1, 0x9D, 0xB0, 0xD8, 0x1F, 0x8C, 0x8D, 0xF1, 0xF3, 0x6E, 0x35, 0xF6, 0x5A, 0xEA, 0x4E,
                0x3F, 0x7A, 0x57, 0x0F, 0x0D, 0xAF, 0x4B, 0x7E, 0x94, 0xF5, 0xFD, 0x87, 0xD8, 0xC6, 0x33, 0x92, 0xF8,
                0xF7, 0x90, 0xDB, 0x35, 0x79, 0x07, 0xEC, 0x55, 0xDE, 0x9D, 0xCB, 0x2E, 0x61, 0x09, 0x7F, 0x03, 0x8F,
                0xC2, 0xE2, 0x8C, 0xF3, 0xB7, 0x75, 0x03, 0x7B, 0x6B, 0xA9, 0x79, 0x2F, 0xDC, 0x0E, 0x6D, 0x3F, 0x7C,
                0xCA, 0x5B, 0xD9, 0xAD, 0xD0, 0xF5, 0xC4, 0x26, 0xD6, 0xFB, 0x58, 0xBB, 0xFE, 0x0C, 0xA8, 0x7D, 0x37,
                0x10, 0x1D, 0xF6, 0x8E, 0xF6, 0x1E, 0x67, 0x58, 0xF9, 0x1B, 0x1C, 0x1D, 0xC1, 0x8F, 0xC7, 0xF0, 0xAB,
                0x64, 0xEF, 0xBE, 0xDE, 0xC7, 0xAE, 0x37, 0xEB, 0x44, 0xE7, 0x66, 0x68, 0xE7, 0x00, 0x63, 0xFA, 0x16,
                0x16, 0x67, 0x01, 0xE5, 0x76, 0x40, 0x1F, 0x18, 0x6E, 0x88, 0x6D, 0xFD, 0x2E, 0x72, 0x66, 0xE8, 0x6C,
                0xA2, 0x8D, 0x59, 0xE8, 0xE6, 0x62, 0x91, 0xD4, 0x82, 0x7D, 0xEE, 0xDF, 0x83, 0x57, 0xA2, 0xE7, 0xB0,
                0x16, 0xBA, 0xEF, 0x8C, 0xF3, 0x7D, 0x76, 0x0C, 0x05, 0x39, 0xA7, 0x75, 0x36, 0xCD, 0x67, 0xA4, 0xD4,
                0xFC, 0xD7, 0x1C, 0xEA, 0xB5, 0xF4, 0x5D, 0xEC, 0x66, 0xEA, 0x10, 0x35, 0x69, 0x12, 0x1B, 0x07, 0x09,
                0xE8, 0x6C, 0x24, 0xEF, 0xB3, 0xE4, 0xF9, 0x35, 0xB4, 0xFF, 0x88, 0xDC, 0x73, 0xBE, 0xBD, 0x4D, 0xF4,
                0x9C, 0xEE, 0x26, 0xF6, 0xFD, 0x7E, 0xF8, 0xED, 0xDA, 0xB3, 0x18, 0xB7, 0x6D, 0x7F, 0x7F, 0xDD, 0xD6,
                0xF6, 0x20, 0x1F, 0x1B, 0xEF, 0x47, 0x6F, 0xB1, 0x26, 0x93, 0xA4, 0x46, 0x5A, 0x67, 0xA7, 0xDF, 0x4D,
                0x7F, 0x25, 0x6B, 0x65, 0x9E, 0x86, 0x25, 0x2C, 0x61, 0x09, 0xFF, 0x03, 0xCA, 0x13, 0xF2, 0xEB, 0x73,
                0xED, 0xF5, 0x09, 0xF9, 0xFE, 0x97, 0xC0, 0xB9, 0xEB, 0x75, 0x7C, 0x62, 0xF3, 0xEB, 0x45, 0x38, 0xFC,
                0xBB, 0xE7, 0x73, 0x32, 0xFB, 0x03, 0xBB, 0x3F, 0x01, 0xE9, 0x4A, 0xE9, 0x9E };
            #endregion
        }

        #region private field


        #endregion

        public ByteBlock Marshal(ByteBlock byteBlock)
        {
            var buffer = Encoding.UTF8.GetBytes(sessionid);
            Array.Copy(buffer, 0, ResultMessage, 18, buffer.Length);
            byteBlock.Write(Utility.UtilityLibrary.EncryptionValue(ResultMessage, ResultMessage.Length));
            return byteBlock;
        }

        public ByteBlock UnMarshal(ByteBlock byteBlock)
        {
            byte[] buffer = new byte[32];
            byteBlock.Read(buffer);
            name = Encoding.UTF8.GetString(buffer).Split(new char[1], StringSplitOptions.RemoveEmptyEntries)[0];
            
            gender = byteBlock.ReadByte();
            race = byteBlock.ReadByte();
            hairstyle = byteBlock.ReadByte();
            haircolor = byteBlock.ReadByte();
            facestyle = byteBlock.ReadByte();

            return byteBlock;
        }

        public void Process(LoginSession session)
        {
            /*var count = Userbox.Instance.GetRoles();
            if (count > 1000000)
            {
                var errp = new UserLoginPacket() { errcode = 340u };
                session.SendPackage(errp.Type, errp.Size, errp);
            }*/

            var roles = Userbox.Instance.GetRoles(session.SessionId);
            var freeze = roles.Where(q => q.FreezeTime != default);
            if (freeze != null && roles.Count >= 4)
            {
                var errp = new x03E9() { errcode = 267U };
                session.SendPackage(errp.Type, errp.Size, errp);
            }

            if (Encoding.UTF8.GetBytes(name).Length > 24)
            {
                var errp = new x03E9() { errcode = 270U };
                session.SendPackage(errp.Type, errp.Size, errp);
            }

            if(Userbox.Instance.GetRole(name) != null)
            {
                var errp = new x03E9() { errcode = 272U };
                session.SendPackage(errp.Type, errp.Size, errp);
            }

            /*if (!Enum.TryParse(this.race.ToString(), out Race race) || !Enum.IsDefined(typeof(Race), race))
            {
                var errp = new UserLoginPacket() { errcode = 258U };
                session.SendPackage(errp.Type, errp.Size, errp);
            }

            if (!Enum.TryParse(this.gender.ToString(), out Gender gender) || !Enum.IsDefined(typeof(Gender), gender))
            {
                var errp = new UserLoginPacket() { errcode = 258U };
                session.SendPackage(errp.Type, errp.Size, errp);
            }

            if (!Enum.TryParse(this.haircolor.ToString(), out HairColor haircolor) || !Enum.IsDefined(typeof(HairColor), haircolor))
            {
                var errp = new UserLoginPacket() { errcode = 258U };
                session.SendPackage(errp.Type, errp.Size, errp);
            }

            if (!Enum.TryParse((this.race * 65536 + this.gender * 256 + this.hairstyle).ToString(), out HairStyle hairstyle) || !Enum.IsDefined(typeof(HairStyle), hairstyle))
            {
                var errp = new UserLoginPacket() { errcode = 258U };
                session.SendPackage(errp.Type, errp.Size, errp);
            }            

            if (!Enum.TryParse((this.race * 65536 + this.gender * 256 + this.facestyle).ToString(), out FaceStyle facestyle) || !Enum.IsDefined(typeof(FaceStyle), facestyle))
            {
                var errp = new UserLoginPacket() { errcode = 258U };
                session.SendPackage(errp.Type, errp.Size, errp);
            }*/

            var role = new Role()
            {
                Name = name,
                Race = race,
                Gender = gender,
                HairStyle = hairstyle,
                HairColor = haircolor,
                FaceStyle = facestyle,
                Level = 1,
                HP = 19,
                MP = 20,
                Map = 142
            };

            int id = Rolebox.Instance.sqlite_role.GetConnection.Insert(role);

            role = Rolebox.Instance.GetRole(name);

            var rolexp = new Rolexp()
            {
                RoleId = role.Id
            };

            Rolebox.Instance.sqlite_rolexp.GetConnection.Insert(rolexp);

            var userole = new Userole()
            {
                Userid = session.SessionId,
                RoleId = role.Id,
                RoleName = name,
            };

            Userbox.Instance.sqlite_userole.GetConnection.Insert(userole);

            var package = new x03ED() { roleid = id };
            session.SendPackage(package.Type, package.Size, package);
        }
    }
}

